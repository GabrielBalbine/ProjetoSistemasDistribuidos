services:
  broker:
    build: { context: ./req-rep, dockerfile: Dockerfile_broker }
    container_name: broker
    ports: ["5555:5555", "5556:5556"]

  proxy:
    build: { context: ./proxy, dockerfile: Dockerfile }
    container_name: proxy
    command: ["python", "-u", "proxy.py"]
    ports: ["5557:5557", "5558:5558"]

  servidor-1:
    build: { context: ./req-rep, dockerfile: Dockerfile_servidor }
    hostname: servidor-1
    depends_on: [broker, proxy]
    environment:
      - SERVER_ID=1
      - TOTAL_SERVERS=3
      - PYTHONUNBUFFERED=1
    volumes:
      - ./shared_data:/app/election

  servidor-2:
    build: { context: ./req-rep, dockerfile: Dockerfile_servidor }
    hostname: servidor-2
    depends_on: [broker, proxy]
    environment:
      - SERVER_ID=2
      - TOTAL_SERVERS=3
      - PYTHONUNBUFFERED=1
    volumes:
      - ./shared_data:/app/election

  servidor-3:
    build: { context: ./req-rep, dockerfile: Dockerfile_servidor }
    hostname: servidor-3
    depends_on: [broker, proxy]
    environment:
      - SERVER_ID=3
      - TOTAL_SERVERS=3
      - PYTHONUNBUFFERED=1
    volumes:
      - ./shared_data:/app/election

  bot-go:
    build: { context: ./proxy, dockerfile: Dockerfile_botgo }
    depends_on: [servidor-1, servidor-2, servidor-3]
    deploy:
      replicas: 2

  cliente-js:
    build: { context: ./req-rep, dockerfile: Dockerfile_cliente }
    stdin_open: true 
    tty: true
    depends_on: [servidor-1]
